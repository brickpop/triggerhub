// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TriggerHubClient is the client API for TriggerHub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TriggerHubClient interface {
	RegisterListener(ctx context.Context, in *ListenerParams, opts ...grpc.CallOption) (*RegisterResult, error)
	PullTriggers(ctx context.Context, in *Void, opts ...grpc.CallOption) (TriggerHub_PullTriggersClient, error)
	PushResult(ctx context.Context, in *ExecutionResult, opts ...grpc.CallOption) (*Void, error)
}

type triggerHubClient struct {
	cc grpc.ClientConnInterface
}

func NewTriggerHubClient(cc grpc.ClientConnInterface) TriggerHubClient {
	return &triggerHubClient{cc}
}

func (c *triggerHubClient) RegisterListener(ctx context.Context, in *ListenerParams, opts ...grpc.CallOption) (*RegisterResult, error) {
	out := new(RegisterResult)
	err := c.cc.Invoke(ctx, "/TriggerHub/RegisterListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerHubClient) PullTriggers(ctx context.Context, in *Void, opts ...grpc.CallOption) (TriggerHub_PullTriggersClient, error) {
	stream, err := c.cc.NewStream(ctx, &TriggerHub_ServiceDesc.Streams[0], "/TriggerHub/PullTriggers", opts...)
	if err != nil {
		return nil, err
	}
	x := &triggerHubPullTriggersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TriggerHub_PullTriggersClient interface {
	Recv() (*ActionRequest, error)
	grpc.ClientStream
}

type triggerHubPullTriggersClient struct {
	grpc.ClientStream
}

func (x *triggerHubPullTriggersClient) Recv() (*ActionRequest, error) {
	m := new(ActionRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *triggerHubClient) PushResult(ctx context.Context, in *ExecutionResult, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/TriggerHub/PushResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TriggerHubServer is the server API for TriggerHub service.
// All implementations must embed UnimplementedTriggerHubServer
// for forward compatibility
type TriggerHubServer interface {
	RegisterListener(context.Context, *ListenerParams) (*RegisterResult, error)
	PullTriggers(*Void, TriggerHub_PullTriggersServer) error
	PushResult(context.Context, *ExecutionResult) (*Void, error)
	mustEmbedUnimplementedTriggerHubServer()
}

// UnimplementedTriggerHubServer must be embedded to have forward compatible implementations.
type UnimplementedTriggerHubServer struct {
}

func (UnimplementedTriggerHubServer) RegisterListener(context.Context, *ListenerParams) (*RegisterResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterListener not implemented")
}
func (UnimplementedTriggerHubServer) PullTriggers(*Void, TriggerHub_PullTriggersServer) error {
	return status.Errorf(codes.Unimplemented, "method PullTriggers not implemented")
}
func (UnimplementedTriggerHubServer) PushResult(context.Context, *ExecutionResult) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushResult not implemented")
}
func (UnimplementedTriggerHubServer) mustEmbedUnimplementedTriggerHubServer() {}

// UnsafeTriggerHubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TriggerHubServer will
// result in compilation errors.
type UnsafeTriggerHubServer interface {
	mustEmbedUnimplementedTriggerHubServer()
}

func RegisterTriggerHubServer(s grpc.ServiceRegistrar, srv TriggerHubServer) {
	s.RegisterService(&TriggerHub_ServiceDesc, srv)
}

func _TriggerHub_RegisterListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenerParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerHubServer).RegisterListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TriggerHub/RegisterListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerHubServer).RegisterListener(ctx, req.(*ListenerParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerHub_PullTriggers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TriggerHubServer).PullTriggers(m, &triggerHubPullTriggersServer{stream})
}

type TriggerHub_PullTriggersServer interface {
	Send(*ActionRequest) error
	grpc.ServerStream
}

type triggerHubPullTriggersServer struct {
	grpc.ServerStream
}

func (x *triggerHubPullTriggersServer) Send(m *ActionRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _TriggerHub_PushResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerHubServer).PushResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TriggerHub/PushResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerHubServer).PushResult(ctx, req.(*ExecutionResult))
	}
	return interceptor(ctx, in, info, handler)
}

// TriggerHub_ServiceDesc is the grpc.ServiceDesc for TriggerHub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TriggerHub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TriggerHub",
	HandlerType: (*TriggerHubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterListener",
			Handler:    _TriggerHub_RegisterListener_Handler,
		},
		{
			MethodName: "PushResult",
			Handler:    _TriggerHub_PushResult_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullTriggers",
			Handler:       _TriggerHub_PullTriggers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "main.proto",
}
